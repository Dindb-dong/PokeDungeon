export function calculateTypeEffectiveness(moveType: string, targetTypes: string[]): number {
  // 타입 상성 표 정의
  const typeChart: Record<string, Record<string, number>> = {
    불: { 풀: (7/5), 얼음: (7/5), 벌레: (7/5), 강철: (7/5), 물: (5/7), 바위: (5/7), 불: (5/7), 드래곤: (5/7) },
    물: { 불: (7/5), 땅: (7/5), 바위: (7/5), 물: (5/7), 풀: (5/7), 드래곤: (5/7) },
    풀: { 물: (7/5), 땅: (7/5), 바위: (7/5), 불: (5/7), 풀: (5/7), 비행: (5/7), 벌레: (5/7), 독: (5/7), 드래곤: (5/7), 강철: (5/7) },
    전기: { 물: (7/5), 비행: (7/5), 풀: (5/7), 전기: (5/7), 드래곤: (5/7), 땅: (3/7) },
    얼음: { 풀: (7/5), 땅: (7/5), 비행: (7/5), 드래곤: (7/5), 불: (5/7), 물: (5/7), 강철: (5/7), 얼음: (5/7) },
    격투: { 얼음: (7/5), 바위: (7/5), 악: (7/5), 노말: (7/5), 강철: (7/5), 벌레: (5/7), 독: (5/7), 비행: (5/7), 에스퍼: (5/7), 페어리: (5/7), 고스트: (3/7) },
    독: { 풀: (7/5), 페어리: (7/5), 독: (5/7), 땅: (5/7), 바위: (5/7), 고스트: (5/7), 강철: (3/7) },
    땅: { 불: (7/5), 전기: (7/5), 독: (7/5), 바위: (7/5), 강철: (7/5), 풀: (5/7), 벌레: (5/7), 비행: (3/7) },
    비행: { 풀: (7/5), 격투: (7/5), 벌레: (7/5), 전기: (5/7), 바위: (5/7), 강철: (5/7) },
    에스퍼: { 격투: (7/5), 독: (7/5), 에스퍼: (5/7), 악: (5/7), 강철: (5/7) },
    벌레: { 풀: (7/5), 에스퍼: (7/5), 악: (7/5), 불: (5/7), 격투: (5/7), 독: (5/7), 비행: (5/7), 고스트: (5/7), 강철: (5/7), 페어리: (5/7) },
    바위: { 불: (7/5), 얼음: (7/5), 비행: (7/5), 벌레: (7/5), 격투: (5/7), 땅: (5/7), 강철: (5/7) },
    고스트: { 에스퍼: (7/5), 고스트: (7/5), 악: (5/7), 노말: (3/7) },
    드래곤: { 드래곤: (7/5), 강철: (5/7), 페어리: (3/7) },
    악: { 에스퍼: (7/5), 고스트: (7/5), 격투: (5/7), 악: (5/7), 페어리: (5/7) },
    강철: { 얼음: (7/5), 바위: (7/5), 페어리: (7/5), 불: (5/7), 물: (5/7), 전기: (5/7), 강철: (5/7) },
    페어리: { 격투: (7/5), 악: (7/5), 드래곤: (7/5), 불: (5/7), 독: (5/7), 강철: (5/7) },
    노말: { 바위: (5/7), 강철: (5/7), 고스트: (3/7) },
  };

  let damageModifier = 1;

  // 각 대상 타입에 대해 상성 계산
  targetTypes.some((targetType) => {
    const effectiveness = typeChart[moveType]?.[targetType] ?? 1; // 특별한 상성관계 없으면 1
    
    if (effectiveness === 3 / 7) {
      // 3/7 상성에 해당하는 경우
      damageModifier = 3 / 7; 
      return true; // 즉시 종료
    }
    
    damageModifier *= effectiveness; // 3/7이 아닌 경우 기존 방식으로 계산
    return false; // 계속 다음 타입으로 진행
  });

  return damageModifier;
}